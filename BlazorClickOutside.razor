@inject IJSRuntime _jsRuntime

<div class="out-element-click @Class"
     @attributes="InputAttributes"
     @ref="Element"
     @onclick="OnClick"
     id="@GuidElement">
    @ChildContent
</div>

@code{
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback OnClickOut { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    public ElementReference Element { get; set; }
    string GuidElement { get; set; }

    public BlazorClickOutside()
    {
        GuidElement = Guid.NewGuid().ToString();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _jsRuntime.InvokeVoidAsync("OutClickComponent.setEvent", DotNetObjectReference.Create(this), Element);

        }
    }

    public void SetExcludedElements(params ElementReference[] elements)
    {
        var items = new List<ElementReference>() { Element };
        items.AddRange(elements);
        _jsRuntime.InvokeVoidAsync("OutClickComponent.setExcludedElements", items);
    }

    [JSInvokable]
    public async Task ClickOut(string guid)
    {
        if (GuidElement == guid)
            await OnClickOut.InvokeAsync(null);
    }
}